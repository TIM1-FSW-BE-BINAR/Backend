// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String         @map("first_name")
  lastName     String         @map("last_name")
  email        String
  phone        String
  password     String
  secretKey    String         @default("") @map("secret_key")
  otpToken     String         @default("") @map("otp_token")
  status       UserStatus     @default(UNVERIFIED)
  role         UserRole       @default(BUYER)
  booking      Booking[]
  Notification Notification[]

  @@map("users")
}

model Airline {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String @default("")
  imageId  String @default("")

  flight Flight[]

  @@map("airlines")
}

model Airport {
  id        Int      @id @default(autoincrement())
  code      String
  name      String
  city      String
  state     String
  country   String
  timezone  String
  latitude  String
  longitude String
  elevation String
  imageUrl  String   @default("")
  imageId   String   @default("")
  createdAt DateTime @default(now()) @map("created_at")

  departure Flight[] @relation("departure")
  arrival   Flight[] @relation("arrival")

  @@map("airports")
}

model Flight {
  id               Int      @id @default(autoincrement())
  flightNumber     String   @map("flight_number")
  airlineId        Int      @map("airline_id")
  departureAirport Int      @map("departure_airport")
  arrivalAirport   Int      @map("arrival_airport")
  departureTime    DateTime @map("departure_time")
  arrivalTime      DateTime @map("arrival_time")
  terminal         String
  information      String

  airline   Airline @relation(fields: [airlineId], references: [id])
  departure Airport @relation(fields: [departureAirport], references: [id], name: "departure")
  arrival   Airport @relation(fields: [arrivalAirport], references: [id], name: "arrival")

  price Float
  class SeatClass @default(ECONOMY)

  seat          Seat[]
  booking       Booking[] @relation("flight")
  returnBooking Booking[] @relation("ReturnFlight")

  @@map("flights")
}

model Seat {
  id            Int        @id @default(autoincrement())
  flightId      Int        @map("flight_id")
  seatNumber    String     @map("seat_number")
  status        SeatStatus @default(AVAILABLE)
  departureTime DateTime?  @default(now())
  arrivalTime   DateTime?  @default(now())

  flight        Flight          @relation(fields: [flightId], references: [id])
  bookingDetail BookingDetail[]

  @@map("seats")
}

model Booking {
  id             Int           @id @default(autoincrement())
  code           String        @unique @default("")
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @map("user_id")
  flightId       Int           @map("flight_id")
  returnFlightId Int?          @map("return_flight_id")
  bookingDate    DateTime      @map("booking_date")
  totalPrice     Float         @map("total_price")
  status         BookingStatus @default(ACTIVE)
  createdAt      DateTime      @default(now()) @map("created_at")
  updateAt       DateTime      @updatedAt @map("update_at")

  flight        Flight          @relation("flight", fields: [flightId], references: [id])
  returnFlight  Flight?         @relation("ReturnFlight", fields: [returnFlightId], references: [id])
  payment       Payment?
  bookingDetail BookingDetail[]

  @@map("bookings")
}

model BookingDetail {
  id          Int      @id @default(autoincrement())
  bookingId   Int      @map("booking_id")
  passengerId Int      @unique @map("passenger_id")
  seatId      Int      @map("seat_id")
  price       Float
  createdAt   DateTime @default(now()) @map("createdAt")
  updateAt    DateTime @default(now()) @updatedAt

  booking   Booking   @relation(fields: [bookingId], references: [id])
  passenger Passenger @relation(fields: [passengerId], references: [id])
  seat      Seat      @relation(fields: [seatId], references: [id])

  @@map("booking_details")
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int           @unique @map("booking_id")
  paymentMethod String        @map("payment_method")
  paymentDate   DateTime      @map("payment_date")
  paymentAmount Float         @map("payment_amount")
  paymentStatus PaymentStatus @default(UNPAID) @map("payment_status")

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Passenger {
  id             Int            @id @default(autoincrement())
  name           String
  familyName     String         @map("family_name")
  gender         Gender         @default(MALE)
  identityNumber String         @map("identity_number")
  citizenship    String
  countryOfIssue String?        @map("country_of_issue")
  title          PassengerTitle @default(Mr)
  dob            DateTime
  expiredDate    DateTime?      @map("expired_Date")
  type           PassengerType  @default(ADULT)

  bookingDetail BookingDetail?

  @@map("passengers")
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType @default(INFO)
  title       String
  description String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  user        User?            @relation(fields: [userId], references: [id])
  userId      Int?             @map("user_id")
}

enum UserStatus {
  VERIFIED
  UNVERIFIED
}

enum NotificationType {
  INFO
  ACCOUNT
  DISCOUNT
  EVENT
  PAYMENT
}

enum UserRole {
  ADMIN
  BUYER
}

enum SeatStatus {
  AVAILABLE
  UNAVAILABLE
  LOCKED
}

enum SeatClass {
  ECONOMY
  FIRST
  BUSINESS
}

enum BookingStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum Gender {
  MALE
  FEMALE
}

enum PassengerTitle {
  Mr
  Mrs
}

enum PassengerType {
  BABY
  CHILD
  ADULT
}
