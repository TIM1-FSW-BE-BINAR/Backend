// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  firstName     String     @map("first_name")
  lastName      String     @map("last_name")
  email         String
  phone         String
  password      String
  secret_key    String
  otpToken      String     @map("otp_token")
  otpExpiration DateTime   @map("otp_expiration")
  status        UserStatus
  role          UserRole
  booking       Booking[]

  @@map("users")
}

model Airline {
  id    Int    @id @default(autoincrement())
  name  String
  image String @default("")

  flight Flight[]

  @@map("airlines")
}

model Airport {
  id        Int      @id @default(autoincrement())
  code      String
  name      String
  city      String
  state     String
  country   String
  timezone  String
  latitude  Int
  longitude Int
  elevation Int
  createdAt DateTime @map("created_at")

  departure Flight[] @relation("departure")
  arrival   Flight[] @relation("arrival")

  @@map("airports")
}

model Flight {
  id               Int      @id @default(autoincrement())
  flightNumber     String   @map("flight_number")
  airlineId        Int      @map("airline_id")
  departureAirport Int      @map("departure_airport")
  arrivalAirport   Int      @map("arrival_airport")
  departureTime    DateTime @map("departure_time")
  arrivalTime      DateTime @map("arrival_time")
  price            Int

  airline   Airline @relation(fields: [airlineId], references: [id])
  departure Airport @relation(fields: [departureAirport], references: [id], name: "departure")
  arrival   Airport @relation(fields: [arrivalAirport], references: [id], name: "arrival")

  seat    Seat[]
  booking Booking[]

  @@map("flights")
}

model Seat {
  id         Int        @id @default(autoincrement())
  flightId   Int        @map("flight_id")
  seatNumber Int        @map("seat_number")
  status     SeatStatus

  flight    Flight      @relation(fields: [flightId], references: [id])
  passenger Passenger[]

  @@map("seats")
}

model Booking {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @map("user_id")
  flightId    Int           @map("flight_id")
  bookingDate DateTime      @map("booking_date")
  totalPrice  Decimal       @map("total_price")
  status      BookingStatus
  createdAt   DateTime      @map("created_at")
  updateAt    DateTime      @map("update_at")

  flight    Flight      @relation(fields: [flightId], references: [id])
  payment   Payment?
  passenger Passenger[]

  @@map("bookings")
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int           @unique @map("booking_id")
  paymentMethod PaymenMethod  @map("payment_method")
  paymentDate   DateTime      @map("payment_date")
  paymentAmount Decimal       @map("payment_amount")
  paymentStatus PaymentStatus @map("payment_status")

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Passenger {
  id             Int            @id @default(autoincrement())
  bookingId      Int            @map("booking_id")
  name           String
  familyName     String         @map("family_name")
  gender         Gender
  identityNumber String         @map("identity_number")
  citizenship    String
  countryOfIssue String         @map("country_of_issue")
  title          PassengerTitle
  dob            DateTime
  expiredDate    DateTime       @map("expired_Date")
  type           PassengerType
  seatId         Int            @map("seat_id")

  booking Booking @relation(fields: [bookingId], references: [id])
  seat    Seat    @relation(fields: [seatId], references: [id])

  @@map("passengers")
}

enum UserStatus {
  VERIFIED
  UNVERIFIED
}

enum UserRole {
  ADMIN
  BUYER
}

enum SeatStatus {
  AVAILABLE
  UNAVAILABLE
  LOCKED
}

enum BookingStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymenMethod {
  QRIS
  VIRTUAL_ACCOUNT
  CREDIT_CARD
  E_WALLET
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum Gender {
  MALE
  FEMALE
}

enum PassengerTitle {
  Mr
  Mrs
}

enum PassengerType {
  BABY
  CHILD
  ADULT
}
