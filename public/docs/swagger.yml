openapi: 3.0.0
info:
  title: Flight Ticketing - BINAR KM7
  description: |-
    ## Created by Team 1 FSW x BE

    **API URL**: [https://binar.azumidev.web.id/api/v1/](https://binar.azumidev.web.id/api/v1/)

    **Github Organization:** [https://github.com/TIM1-FSW-BE-BINAR](https://github.com/TIM1-FSW-BE-BINAR)

    **Team 1 FSW x BE**

    ```
    > {FSW} Dhiya Ul Faruq - @pentahead 
    > {FSW} Michael Joenathan Darwin - @MichaelJD-MJD 
    > {FSW} Naila Jinan Gaisani - @nellnelaa 
    > {FSW} Muhammad Fadhillah Rahman - @FadPro77 
    > {BE} Naufal Azmi Ginting - @BoboiAzumi 
    > {BE} Viery Nugroho - @vierynugroho 
    > {BE} Salsabilla Aulia - @chacabilla 
    > {BE} Yogi Hafidh Maulana - @Yogihafidh 

     ```
  version: 1.0.0
servers:
  - url: https://binar.azumidev.web.id/api/v1
    description: production
  - url: http://localhost:3000/api/v1
    description: development
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Auth
  - name: Users
  - name: Airports
  - name: Airlines
  - name: Flights
    description: Flight Resources
  - name: Seats
  - name: Booking
  - name: Notification
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: login
      description: |-
        ``` json
        {
            "email": "jane.smith@example.com", // admin
            // "email": "john.doe@example.com", // buyer
            "password": "password"
        }
         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: john.doe@example.com
                password: password
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: login successfully
                data:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NywiaWF0IjoxNzMyNTA4ODkzLCJleHAiOjE3MzI1OTUyOTN9.RcqSghLV99vMSp82Lw8f2qPkKbQwwkWOMqO6UB8br9w
        '401':
          description: failed
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: wrong credential
      parameters: []
  /auth/register:
    post:
      tags:
        - Auth
      summary: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                firstName: Kaguya
                lastName: Shinomiya
                phone: '086655446677'
                email: kutakulu@gmail.com
                password: bakashirogane
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 201
                  message: user has created, let's verify
        '409':
          description: failed
          content:
            application/json:
              example:
                error:
                  statusCode: 409
                  message: email has registered
      parameters: []
  /auth/verify:
    post:
      tags:
        - Auth
      summary: verify
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: kutakulu@gmail.com
                otp: '150428'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: OTP is valid
        '400':
          description: invalid otp
          content:
            application/json:
              example:
                error:
                  statusCode: 400
                  message: Invalid OTP
      parameters: []
  /auth/reset-otp:
    post:
      tags:
        - Auth
      summary: reset-otp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: kutakulu@gmail.com
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: OTP has been sent
        '404':
          description: failed
          content:
            application/json:
              example:
                error:
                  statusCode: 404
                  message: User not found
      parameters: []
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: reset-password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: kutakulu@gmail.com
                otp: '150428'
                password: shirogane123
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                error:
                  statusCode: 400
                  message: Invalid OTP Code 1
      parameters: []
  /auth/me:
    get:
      tags:
        - Auth
      summary: get user logged in
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: user logged in data retrieved successfully
                data:
                  id: 4
                  firstName: Sarah
                  lastName: Williams
                  email: sarah.williams@example.com
                  phone: '+62822334455'
                  status: VERIFIED
                  role: BUYER
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
      parameters: []
      security:
        - bearerAuth: []
  /users:
    get:
      tags:
        - Users
      summary: get all users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: page number
          example: '3'
        - name: limit
          in: query
          schema:
            type: integer
          description: total item per page
          example: '1'
        - name: userStatus
          in: query
          schema:
            type: string
          description: user status [VERIFIED, UNVERIFIED]
          example: VERIFIED
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: users data retrieved successfully
                  pagination:
                    totalPage: 1
                    currentPage: 3
                    pageItems: 0
                    nextPage: null
                    prevPage: 2
                data: []
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
        '422':
          description: invalid user status
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: 'invalid user status value. allowed status: VERIFIED, UNVERIFIED'
      security:
        - bearerAuth: []
  /users/profile:
    patch:
      tags:
        - Users
      summary: update profile user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                firstName: Test Update
                lastName: Shinomiya
                phone: '086655446677'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: user profile updated successfully
                data:
                  id: 3
                  firstName: Test Update
                  lastName: Shinomiya
                  email: kutakulu@gmail.com
                  phone: '086655446677'
                  status: VERIFIED
                  role: BUYER
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
        '422':
          description: not allowed field
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: '"email" is not allowed'
      parameters: []
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: delete user logged in account
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: user account deleted successfully
                data:
                  user:
                    id: 4
                    firstName: Test Update
                    lastName: Shinomiya
                    email: viery15102002@gmail.com
                    phone: '086655446677'
                    password: $2b$10$yRsvJb7SCEd6UX8Yzd/.aOShOgjQVImFRcRw8ear8wl/IV5/mz9H.
                    secretKey: ''
                    otpToken: ''
                    status: VERIFIED
                    role: BUYER
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
      parameters: []
      security:
        - bearerAuth: []
  /airports:
    post:
      tags:
        - Airports
      summary: create
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: Airport created successfully
                data:
                  airport:
                    id: 9
                    code: HLP
                    name: Halim Perdanakusuma International Airport
                    city: DKI Jakarta
                    state: Asia Tenggara
                    country: '1'
                    timezone: Asia/Jakarta
                    latitude: '1'
                    longitude: '1'
                    elevation: '1'
                    imageUrl: https://ik.imagekit.io/vieryn/airports/image-1733114851306_xJxBmViPM.jpeg
                    imageId: 674d3be7e375273f60c23a27
                    createdAt: '2024-12-02T04:47:37.509Z'
        '400':
          description: file too large
          content:
            application/json:
              example:
                error:
                  statusCode: 400
                  message: no file selected
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
        '409':
          description: already exist
          content:
            application/json:
              example:
                error:
                  statusCode: 409
                  message: Airport code already exists
        '422':
          description: create
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: '"image" is not allowed'
      parameters: []
      security:
        - bearerAuth: []
    get:
      tags:
        - Airports
      summary: get all data
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: page number
          example: '1'
        - name: limit
          in: query
          schema:
            type: integer
          description: total item per page
          example: '3'
        - name: city
          in: query
          schema:
            type: string
          description: filter by city
          example: Jakarta
        - name: sortBy
          in: query
          schema:
            type: string
          description: sort by name
          example: name
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: Airports data retrieved successfully
                  pagination: null
                data: []
  /airlines:
    get:
      tags:
        - Airlines
      summary: Get All Airlines
      description: |-
        Endpoint untuk mengambil daftar semua maskapai penerbangan yang terdaftar dalam sistem. Endpoint ini akan mengembalikan data dalam bentuk array yang berisi objek maskapai, termasuk ID, nama, dan URL gambar untuk setiap maskapai.

        **Response yang Diharapkan**

        - Array berisi objek maskapai:
            
            - `id`: ID unik maskapai (integer).
                
            - `name`: Nama maskapai penerbangan (string).
                
            - `image_url`: URL gambar maskapai (string).
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: page number
          example: '3'
        - name: limit
          in: query
          schema:
            type: integer
          description: total item per page
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: Airlines fetched successfully
                  pagination: null
                data:
                  - id: 1
                    name: Garuda Indonesia
                    imageUrl: garuda.png
                    imageId: garuda-logo
                  - id: 2
                    name: Singapore Airlines
                    imageUrl: singapore-airlines.png
                    imageId: sia-logo
                  - id: 3
                    name: Qatar Airways
                    imageUrl: qatar-airways.png
                    imageId: qatar-logo
                  - id: 4
                    name: Emirates
                    imageUrl: emirates.png
                    imageId: emirates-logo
                  - id: 5
                    name: Qantas
                    imageUrl: qantas.png
                    imageId: qantas-logo
                  - id: 6
                    name: Delta Airlines
                    imageUrl: delta.png
                    imageId: delta-logo
                  - id: 7
                    name: Lion Air
                    imageUrl: lion-air.png
                    imageId: lion-logo
                  - id: 8
                    name: AirAsia
                    imageUrl: airasia.png
                    imageId: airasia-logo
        '404':
          description: Error response - Airline Not Found
          content:
            application/json:
              example:
                error:
                  statusCode: 404
                  message: GET - /api/v1/airlines is not found!
    post:
      tags:
        - Airlines
      summary: Create Airline
      description: |-
        Endpoint untuk membuat data maskapai penerbangan baru. Anda harus mengirimkan nama maskapai dan gambar maskapai dalam format `form-data`. Gambar maskapai harus berupa file gambar (misalnya JPEG, PNG). Response akan mengembalikan data maskapai yang baru dibuat, termasuk ID maskapai dan URL gambar yang diunggah.

        **Parameter (Body Request)**:

        - `name` (required): Nama maskapai penerbangan (string).
            
        - `image` (required): Gambar maskapai dalam format file (form-data).
            

        **Response yang Diharapkan**:

        - `id`: ID unik maskapai yang baru dibuat (integer).
            
        - `name`: Nama maskapai penerbangan (string).
            
        - `image_url`: URL gambar maskapai yang baru diunggah (string).
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 201
                  message: Airline created successfully
                data:
                  id: 10
                  name: Garuda Airline
                  imageUrl: https://ik.imagekit.io/vieryn/airlines/image-1733027041812_rBNjDI47QW.jpg
                  imageId: 674be501e375273f60d0a937
        '400':
          description: no file selected
          content:
            application/json:
              example:
                error:
                  statusCode: 400
                  message: no file selected
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
        '409':
          description: already exist
          content:
            application/json:
              example:
                error:
                  statusCode: 409
                  message: Airline name already exists
        '422':
          description: invalid field value
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: Only images (jpeg, jpg, png) are allowed!
      parameters: []
      security:
        - bearerAuth: []
  /flights:
    post:
      tags:
        - Flights
      summary: create
      description: |-
        ``` json
        {
            "flightNumber": "FE",
            "airlineId": "1000",
            "departureAirport": "1",
            "arrivalAirport": "1",
            "departureTime": "2024-01-01T00:00:00.000Z",
            "arrivalTime": "2024-01-02T00:00:00.000Z",
            "terminal": "terminal 2A",
            "price": 8000,
            "class": "FIRST",
            "information":"free wifi-free inflight meals" // using - separator
        }
         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                flightNumber: FE
                airlineId: '1000'
                departureAirport: '1'
                arrivalAirport: '1'
                departureTime: '2024-01-01T00:00:00.000Z'
                arrivalTime: '2024-01-02T00:00:00.000Z'
                terminal: terminal 2A
                price: 8000
                class: FIRST
                information: free wifi-free inflight meals
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: flight created successfully
                data:
                  flight:
                    id: 1
                    flightNumber: CH1
                    airlineId: 2
                    departureAirport: 1
                    arrivalAirport: 2
                    departureTime: '2024-01-01T00:00:00.000Z'
                    arrivalTime: '2024-01-02T00:00:00.000Z'
                    terminal: terminal 2A
                    information: free wifi-free inflight meals
                    price: 5000
                    class: BUSINESS
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
        '404':
          description: arrival airport is not found
          content:
            application/json:
              example:
                error:
                  statusCode: 404
                  message: airline is not found
        '409':
          description: already used flight number
          content:
            application/json:
              example:
                error:
                  statusCode: 409
                  message: Flight number is already used by another flight
        '422':
          description: invalid arrival airport
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: '"airlineId" must be a number'
      parameters: []
      security:
        - bearerAuth: []
    get:
      tags:
        - Flights
      summary: get all
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: page number
          example: '100'
        - name: limit
          in: query
          schema:
            type: integer
          description: page items
          example: '10'
        - name: seatClass
          in: query
          schema:
            type: string
          description: seat class [BUSINESS, ECONOMY, FIRST]
          example: business
        - name: isCheapest
          in: query
          schema:
            type: boolean
          description: sort - string true or false
          example: 'true'
        - name: flightNumber
          in: query
          schema:
            type: string
          description: flight Number
          example: CH2
        - name: priceMin
          in: query
          schema:
            type: integer
          description: minimum price
          example: '3000'
        - name: priceMax
          in: query
          schema:
            type: integer
          description: maximum price
          example: '1000'
        - name: earliestDeparture
          in: query
          schema:
            type: boolean
          description: sort - string true or false
          example: 'true'
        - name: latestDeparture
          in: query
          schema:
            type: boolean
          description: sort - string true or false
          example: 'true'
        - name: earliestArrival
          in: query
          schema:
            type: boolean
          description: sort - string true or false
          example: 'true'
        - name: latestArrival
          in: query
          schema:
            type: boolean
          description: sort - string true or false
          example: 'true'
        - name: shortest
          in: query
          schema:
            type: boolean
          description: sort - string true or false
          example: 'true'
        - name: arrivalAirport
          in: query
          schema:
            type: integer
          description: filter - integer - airport ID
          example: '1'
        - name: departureAirport
          in: query
          schema:
            type: integer
          description: filter - integer - airport ID
          example: '2'
        - name: departureDate
          in: query
          schema:
            type: number
          description: filter - ISO DATE - departure date
          example: '2024-01-31T00:00:00.000Z'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: flights data retrieved successfully
                  pagination:
                    totalPage: 0
                    currentPage: 100
                    pageItems: 0
                    nextPage: null
                    prevPage: 99
                data: []
        '422':
          description: invalid seatClass params
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: invalid value for departure airport or arrival airport
  /seats:
    post:
      tags:
        - Seats
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                flightId: 1
                seatNumber: A3
                status: UNAVAILABLE
                departureTime: '2024-01-01T00:00:00.000Z'
                arrivalTime: '2024-01-02T00:00:00.000Z'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: seat created successfully
                data:
                  seat:
                    id: 1
                    flightId: 1
                    seatNumber: B3
                    status: UNAVAILABLE
                    departureTime: '2024-01-01T00:00:00.000Z'
                    arrivalTime: '2024-01-02T00:00:00.000Z'
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
        '404':
          description: flightId is not found
          content:
            application/json:
              example:
                error:
                  statusCode: 404
                  message: flight id is not found
        '409':
          description: already created
          content:
            application/json:
              example:
                error:
                  statusCode: 409
                  message: Seat number has already been used in the same flight
        '422':
          description: invalid input
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: '"class" must be one of [ECONOMY, FIRST, BUSINESS]'
      parameters: []
      security:
        - bearerAuth: []
    get:
      tags:
        - Seats
      summary: get all
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: page number
          example: '1'
        - name: limit
          in: query
          schema:
            type: integer
          description: page items
          example: '5'
        - name: seatClass
          in: query
          schema:
            type: string
          description: seat class [ECONOMY, BUSINESS, FIRST]
          example: BUSINESS
        - name: flightId
          in: query
          schema:
            type: integer
          description: flight ID
          example: '1'
        - name: departureTime
          in: query
          schema:
            type: string
          description: flight departure time [ISO date]
          example: '2024-01-01T00:00:00Z'
        - name: arrivalTime
          in: query
          schema:
            type: string
          description: flight arrival Time [ISO date]
          example: '2024-01-01T00:00:00Z'
        - name: seatStatus
          in: query
          schema:
            type: string
          description: seat status [AVAILABLE, LOCKED, UNAVAILABLE]
          example: LOCKED
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: seats data retrieved successfully
                  pagination: null
                data:
                  - id: 2
                    flightId: 1
                    seatNumber: A1
                    status: UNAVAILABLE
                    departureTime: '2024-01-01T00:00:00.000Z'
                    arrivalTime: '2024-01-02T00:00:00.000Z'
                    _count:
                      bookingDetail: 0
                    flight:
                      id: 1
                      flightNumber: GA123
                      airlineId: 1
                      departureAirport: 1
                      arrivalAirport: 4
                      departureTime: '2024-07-15T08:00:00.000Z'
                      arrivalTime: '2024-07-15T11:00:00.000Z'
                      terminal: A
                      information: Direct flight from Jakarta to Singapore
                      price: 850
                      class: ECONOMY
                  - id: 1
                    flightId: 1
                    seatNumber: B3
                    status: LOCKED
                    departureTime: '2024-01-01T00:00:00.000Z'
                    arrivalTime: '2024-01-02T00:00:00.000Z'
                    _count:
                      bookingDetail: 0
                    flight:
                      id: 1
                      flightNumber: GA123
                      airlineId: 1
                      departureAirport: 1
                      arrivalAirport: 4
                      departureTime: '2024-07-15T08:00:00.000Z'
                      arrivalTime: '2024-07-15T11:00:00.000Z'
                      terminal: A
                      information: Direct flight from Jakarta to Singapore
                      price: 850
                      class: ECONOMY
                  - id: 3
                    flightId: 1
                    seatNumber: A2
                    status: UNAVAILABLE
                    departureTime: '2024-01-01T00:00:00.000Z'
                    arrivalTime: '2024-01-02T00:00:00.000Z'
                    _count:
                      bookingDetail: 0
                    flight:
                      id: 1
                      flightNumber: GA123
                      airlineId: 1
                      departureAirport: 1
                      arrivalAirport: 4
                      departureTime: '2024-07-15T08:00:00.000Z'
                      arrivalTime: '2024-07-15T11:00:00.000Z'
                      terminal: A
                      information: Direct flight from Jakarta to Singapore
                      price: 850
                      class: ECONOMY
      security:
        - bearerAuth: []
  /booking:
    post:
      tags:
        - Booking
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                flightId: 3
                returnFlightId: 1
                bookingDate: '2024-11-26T00:00:00Z'
                bookingDetail:
                  - seatId: 70
                    price: 200000
                    passenger:
                      name: Anton
                      familyName: Wibowo
                      gender: MALE
                      identityNumber: '123456'
                      citizenship: Indonesia
                      countryOfIssue: Indonesia
                      title: Mr
                      dob: '1985-05-15T00:00:00Z'
                      expiredDate: '2030-05-15T23:59:59Z'
                      type: ADULT
                  - seatId: 11
                    price: 200000
                    passenger:
                      name: Anton
                      familyName: Wibowo
                      gender: MALE
                      identityNumber: '123456'
                      citizenship: Indonesia
                      countryOfIssue: Indonesia
                      title: Mr
                      dob: '1985-05-15T00:00:00Z'
                      expiredDate: '2030-05-15T23:59:59Z'
                      type: ADULT
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{token}}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 201
                  message: booking created
        '401':
          description: error
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: jwt expired, please re-login
                  details: jwt expired
      security:
        - bearerAuth: []
    get:
      tags:
        - Booking
      summary: find
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzMzNDg3NDY5LCJleHAiOjE3MzM1NzM4Njl9._2hrgP6uvCJx7nyARkGqVd1K_CmxMFucmyAT6F0OwgY
        - name: page
          in: query
          schema:
            type: integer
          example: '1'
        - name: limit
          in: query
          schema:
            type: integer
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  status: 200
                  message: success
                data:
                  - id: 16
                    bookingCode: 2411026A6E
                    userId: 1
                    flightId: 3
                    returnFlightId: 1
                    bookingDate: '2024-12-03T13:37:05.394Z'
                    totalPrice: 400000
                    status: ACTIVE
                    createdAt: '2024-12-03T13:37:05.424Z'
                    updateAt: '2024-12-03T13:37:05.424Z'
                    flight:
                      id: 3
                      flightNumber: LA789
                      airlineId: 3
                      departureAirport: 3
                      arrivalAirport: 1
                      departureTime: '2024-12-03T18:00:00.000Z'
                      arrivalTime: '2024-12-03T21:00:00.000Z'
                      terminal: T2
                      information: Delayed flight
                      price: 100
                      class: ECONOMY
                    returnFlight:
                      id: 1
                      flightNumber: GA123
                      airlineId: 1
                      departureAirport: 1
                      arrivalAirport: 2
                      departureTime: '2024-12-01T08:00:00.000Z'
                      arrivalTime: '2024-12-01T11:00:00.000Z'
                      terminal: T3
                      information: Non-stop flight
                      price: 150
                      class: ECONOMY
        '401':
          description: error
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: jwt expired, please re-login
                  details: jwt expired
      security:
        - bearerAuth: []
  /booking/group:
    get:
      tags:
        - Booking
      summary: grouped booking
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzMzMTMyMTI1LCJleHAiOjE3MzMyMTg1MjV9._VeGoMUm1FfV2PXJJae9ETdxBeK-9jsGoAOWyrIcpok
        - name: page
          in: query
          schema:
            type: integer
          description: page number
          example: '5'
        - name: limit
          in: query
          schema:
            type: integer
          description: total item per page
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  status: 200
                  message: success
                  pagination:
                    totalPage: 1
                    currentPage: 1
                    pageItems: 1
                    nextPage: null
                    prevPage: null
                data:
                  Desember:
                    - id: 16
                      bookingCode: 2411026A6E
                      userId: 1
                      flightId: 3
                      returnFlightId: 1
                      bookingDate: '2024-12-03T13:37:05.394Z'
                      totalPrice: 400000
                      status: ACTIVE
                      createdAt: '2024-12-03T13:37:05.424Z'
                      updateAt: '2024-12-03T13:37:05.424Z'
        '401':
          description: error
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: jwt expired, please re-login
                  details: jwt expired
      security:
        - bearerAuth: []
  /notifications:
    get:
      tags:
        - Notification
      summary: check notification
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: notifications data retrieved successfully
                  pagination: null
                data:
                  - id: 1
                    type: DISCOUNT
                    title: Discount Natal
                    description: Diskon 100% Khusus Hari Natal
                    isRead: false
                    createdAt: '2024-12-05T14:34:58.033Z'
                    userId: 1
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
        '422':
          description: invalid type
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: 'Invalid notification type value. Allowed types: INFO, DISCOUNT, EVENT, PAYMENT'
      parameters: []
      security:
        - bearerAuth: []
    post:
      tags:
        - Notification
      summary: create notification
      description: |-
        ``` json
        {
            "type": "ACCOUNT",
            "title": "Info Aja",
            "description": "info: test",
            "isRead": false
            // "userId": 1 // for specific user
        }
         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: ACCOUNT
                title: Info Aja
                description: 'info: test'
                isRead: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: users notification created successfully
                data:
                  id: 2
                  type: INFO
                  title: Perbarui profile
                  description: Perbarui Profile anda untuk keandalan data pada sistem
                  isRead: false
                  createdAt: '2024-12-06T02:19:21.190Z'
                  userId: null
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
        '403':
          description: forbidden
          content:
            application/json:
              example:
                error:
                  statusCode: 403
                  message: forbidden, Go Back ! >:(
        '422':
          description: invalid type
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: '"type" must be one of [INFO, DISCOUNT, ACCOUNT, EVENT, PAYMENT]'
      parameters: []
      security:
        - bearerAuth: []
  /notifications/user/user-notifications:
    get:
      tags:
        - Notification
      summary: get by user logged in
      parameters:
        - name: type
          in: query
          schema:
            type: string
          description: |-
            valid value =  INFO
              DISCOUNT
              EVENT
              PAYMENT
              ACCOUNT
          example: INFO
        - name: page
          in: query
          schema:
            type: integer
          description: page number
          example: '3'
        - name: limit
          in: query
          schema:
            type: integer
          description: total item per page
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: notifications data retrieved successfully
                  pagination: null
                data:
                  - id: 35
                    type: ACCOUNT
                    title: Perbarui profile
                    description: Perbarui Profile anda untuk keandalan data pada sistem
                    isRead: false
                    createdAt: '2024-12-06T07:37:43.414Z'
                    userId: 1
        '422':
          description: filter - invalid type
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: 'Invalid notification type value. Allowed types: INFO, DISCOUNT, EVENT, PAYMENT'
      security:
        - bearerAuth: []
  /notifications/read/mark-as-read:
    patch:
      tags:
        - Notification
      summary: mark as read
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                notificationID: 1
                isRead: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                meta:
                  statusCode: 200
                  message: user notification updated successfully
                data:
                  id: 34
                  type: ACCOUNT
                  title: Perbarui profile
                  description: Perbarui Profile anda untuk keandalan data pada sistem
                  isRead: true
                  createdAt: '2024-12-06T06:17:42.903Z'
                  userId: 1
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  message: unauthorized
        '404':
          description: not found
          content:
            application/json:
              example:
                error:
                  statusCode: 404
                  message: notification is not found
        '422':
          description: invalid field value
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  message: '"notificationID" must be a string'
      parameters: []
      security:
        - bearerAuth: []
  /users/{userID}:
    get:
      tags:
        - Users
      summary: get by user ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                firstName: Viery
                lastName: Nugroho
                phone: '628123456789'
                role: ADMIN
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: delete
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
  /airports/{airportID}:
    put:
      tags:
        - Airports
      summary: update
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: airportID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    get:
      tags:
        - Airports
      summary: read by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: airportID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    delete:
      tags:
        - Airports
      summary: delete
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: airportID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
  /airlines/{airlineID}:
    get:
      tags:
        - Airlines
      summary: Get Airlines by ID
      description: |-
        Endpoint untuk mengambil detail informasi tentang maskapai penerbangan berdasarkan ID. Anda harus mengganti `{id}` dengan ID maskapai yang ingin dicari. Response akan mengembalikan informasi lengkap maskapai, termasuk nama dan gambar.

        **Parameter**:

        - `id`: ID maskapai yang ingin dicari (integer).
            

        **Response yang Diharapkan**:

        - `id`: ID maskapai (integer).
            
        - `name`: Nama maskapai penerbangan (string).
            
        - `image_url`: URL gambar maskapai (string).
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: airlineID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
  /api/v1/airlines/{airlineID}:
    put:
      tags:
        - Airlines
      summary: Update Airline
      description: |-
        Endpoint untuk memperbarui data maskapai penerbangan berdasarkan ID. Anda dapat mengirimkan data baru untuk nama maskapai dan gambar maskapai. Pastikan untuk mengganti `{id}` dengan ID maskapai yang ingin diperbarui. Response akan mengembalikan data maskapai yang telah diperbarui.

        **Parameter**:

        - `id`: ID maskapai yang ingin diperbarui (integer).
            

        **Body Request**:

        - `name`: Nama maskapai penerbangan baru (string).
            
        - `image` (optional): Gambar maskapai baru dalam format file (form-data).
            

        **Response yang Diharapkan**:

        - `id`: ID maskapai yang telah diperbarui (integer).
            
        - `name`: Nama maskapai yang telah diperbarui (string).
            
        - `image_url`: URL gambar maskapai yang telah diperbarui (string).
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: airlineID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
  /airlines/airlines/{airlineID}:
    delete:
      tags:
        - Airlines
      summary: Delete Airline
      description: |-
        Endpoint untuk menghapus maskapai penerbangan berdasarkan ID. Anda harus mengganti `{id}` dengan ID maskapai yang ingin dihapus. Jika berhasil, server akan mengembalikan status sukses. Jika maskapai tidak ditemukan, akan mengembalikan error dengan pesan yang sesuai.

        **Parameter**:

        - `id`: ID maskapai yang ingin dihapus (integer).
            

        **Response yang Diharapkan**:

        - `message`: Pesan konfirmasi bahwa maskapai telah berhasil dihapus (string).
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: airlineID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
  /flights/{flightID}:
    put:
      tags:
        - Flights
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                flightNumber: CH2
                airlineId: '2'
                departureAirport: '1'
                arrivalAirport: '22'
                departureTime: '2024-01-01T00:00:00.000Z'
                arrivalTime: '2024-01-02T00:00:00.000Z'
                terminal: terminal 2A
                price: 5000
                class: BUSINESS
                information: free wifi-free inflight meals
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: flightID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    delete:
      tags:
        - Flights
      summary: delete
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: flightID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    get:
      tags:
        - Flights
      summary: get by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: flightID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
  /seats/{seatID}:
    put:
      tags:
        - Seats
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                flightId: 1
                seatNumber: B3
                status: LOCKED
                departureTime: '2024-01-01T00:00:00.000Z'
                arrivalTime: '2024-01-02T00:00:00.000Z'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: seatID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    delete:
      tags:
        - Seats
      summary: deleted
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: seatID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    get:
      tags:
        - Seats
      summary: get by seat ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: seatID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
  /booking/id/{bookingId}:
    get:
      tags:
        - Booking
      summary: booking by id
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzMzMTMyMTI1LCJleHAiOjE3MzMyMTg1MjV9._VeGoMUm1FfV2PXJJae9ETdxBeK-9jsGoAOWyrIcpok
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /booking/code/{bookingCode}:
    get:
      tags:
        - Booking
      summary: booking by code
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{token}}
        - name: bookingCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /notifications/{notificationID}:
    get:
      tags:
        - Notification
      summary: get by Notification ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: notificationID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    put:
      tags:
        - Notification
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: PAYMENT
                title: Pembayaran Booking
                description: Cepet bayar
                isRead: false
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: notificationID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
    delete:
      tags:
        - Notification
      summary: delete
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - name: notificationID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
security:
  - bearerAuth: []
